# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Mission-X for Skunkcrafts

## Auto run workflow, only if we have a tag that starts with v*
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:


jobs:
  release:
#    Execute only if we have "push + tag name" that starts with "v"
#    if: github.event_name == 'push' && startsWith(github.ref_name, 'v')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "plugin-name=missionx" >> "$GITHUB_OUTPUT" 

      - name: setup crc32 tool
        shell: bash
        run: |
          sudo apt-get install -y libarchive-zip-perl
          TAG=${GITHUB_REF##*/}
          if [ ! -z "$TAG" ]; then
            echo "VERSION=$TAG" > version.mak
          else 
            TAG=25.x
            echo "VERSION=$TAG" > version.mak
          fi

          echo -e "TAG: ${TAG}\nThe content of version.mak is"
          cat version.mak

      - name: Prepare Skunkcrafts Updater
        shell: bash
        run: |
          # at this point version.mak should have the version number
          source version.mak
          RELEASE_FOLDER=release/${{ steps.strings.outputs.plugin-name }}
          cp -rdp ./plugin/* "${RELEASE_FOLDER}/"
          ls -lR release
          


#          sudo apt-get update  ## Add this at the start of the crc32 tool
#      - name: Create Release Folder
#
#        run: mkdir -p release/missionx
#
#      - name: Copy Files to Release Folder
#        run: |
#          cp -r ./* missionx/
#          # Exclude the .git directory if you don't need it in the release
#          rm -rf missionx/.git
#
#      - name: List Contents of Release Folder
#        run: ls -R missionx/
#
#      # Optional: Add steps here to create a release, upload artifacts, etc.
#      # For example, to create a simple artifact:
#      - name: Upload Release Folder as Artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: missionx-${github.ref_name}
#          path: missionx
