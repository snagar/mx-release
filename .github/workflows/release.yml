# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Mission-X for Skunkcrafts

## Auto run workflow, only if we have a tag that starts with v*
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:


jobs:
  build:
    # Execute only if we have "push + tag name" that starts with "v"
    # if: github.event_name == 'push' && startsWith(github.ref_name, 'v')
    runs-on: macos-13
    # runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "plugin-name=missionx" >> "$GITHUB_OUTPUT" 

      - name: setup crc32 tool
        shell: bash
        run: |
          # sudo apt install -y libarchive-zip-perl
          TAG=${GITHUB_REF##*/}
          if [ ! -z "$TAG" ]; then
            echo "VERSION=$TAG" > version.mak
          else 
            TAG=25.x
            echo "VERSION=$TAG" > version.mak
          fi

          echo -e "TAG: ${TAG}\nThe content of version.mak is"
          cat version.mak

      - name: Prepare Skunkcrafts Updater
        shell: bash
        run: |
          # at this point version.mak should have the version number
          source version.mak
          RELEASE_FOLDER=release/${{ steps.strings.outputs.plugin-name }}
          mkdir -p ${RELEASE_FOLDER}
          # cp -rdp ./plugin/* "${RELEASE_FOLDER}/"
          cp -r ./plugin/* "${RELEASE_FOLDER}/"
          # ls -lR release
          
          ## skunkcrafts
            sed -e "s|@VERSION@|${VERSION}|g" skunkcrafts_updater.cfg.template > "${RELEASE_FOLDER}/skunkcrafts_updater.cfg"

          # create crc32 checksum for all values and write to skunkcrafts_updater_whitelist.txt
          # format is <filename>|<crc32 checksum>
          # include subdirectories
          rm -f ${RELEASE_FOLDER}/skunkcrafts_updater_whitelist.txt
          find ${RELEASE_FOLDER}/ -type f ! \( -name '*skunkcrafts_updater*' -o -path '*skunkcrafts_updater*' \) -print0 | while IFS= read -r -d '' file; do
            checksum_hex=$(crc32 "$file")
            # Convert hex checksum to uint32 decimal
            checksum_decimal=$((16#$checksum_hex))
            # Remove "release/" prefix from $file
            modified_file="${file#${RELEASE_FOLDER}/}"
            echo "$modified_file|$checksum_decimal" >> ${RELEASE_FOLDER}/skunkcrafts_updater_whitelist.txt            
          done
          
          echo -e "Skunkcrafts updater:\n--------------->"
          cat ${RELEASE_FOLDER}/skunkcrafts_updater.cfg
          echo -e "<--------------"

          echo -e "\n\nSkunkcrafts whitelist - crc32:\n--------------->"
          cat ${RELEASE_FOLDER}/skunkcrafts_updater_whitelist.txt
          echo -e "<--------------"

          touch ${RELEASE_FOLDER}/skunkcrafts_updater_blacklist.txt
          
          #(cd ./release && 7z a "${{ github.workspace }}/${{ steps.strings.outputs.plugin-name }}-${VERSION}.zip" *)
               
               
          TAG=${GITHUB_REF##*/}
          TARGET_BRANCH="release"
          if [[ $TAG == *"-test"* ]]     # if TAG contains -test-
          then
            echo "This is a just a build test"
            TARGET_BRANCH="build-test"
          elif [[ $TAG == *"-beta"* ]]        # if TAG contains -beta-
          then
            echo "This is a beta release"
            TARGET_BRANCH="beta"
          fi
          
          # debug which files are part of the branch     
          # ls -lR release
          
          echo -e "TARGET_BRANCH - ${TARGET_BRANCH}"
          
          ## Create target branch
          git checkout -b ${TARGET_BRANCH}
          
          if [ -d "TARGET_BRANCH" ]; then
            echo "Directory ${TARGET_BRANCH} does exist."
            git rm -r -f  ${TARGET_BRANCH}/*
          else 
            echo "Directory '${TARGET_BRANCH}' doesn't exist."
          fi
          
          echo -e "Configuring git before pushing branch '${TARGET_BRANCH}' ."
          git config --global user.email "snagar.dev@gmail.com"
          git config --global user.name "snagar"

          # Display branches
          echo "-----"
          echo -e "Display Branches"
          git branch -a
          # display folders
          echo "-----"
          ls -l          
          echo "-----"
          
          echo "Preparing branch: ${TARGET_BRANCH}"          
          echo "-----"
          git add .
          # echo "!!Delete the large compressed file [${{ steps.strings.outputs.plugin-name }}*.zip]"
          # git rm -f ${{ steps.strings.outputs.plugin-name }}*.zip
          # rm -f ${{ steps.strings.outputs.plugin-name }}*.zip
          
          echo -e "\n--------->"
          ls -lR .
          echo -e "\n<---------"
          
          # git add release/${{ steps.strings.outputs.plugin-name }}
          # # force add otherwise ignored directories
          # git add -f release/${{ steps.strings.outputs.plugin-name }}/*_x64/*.xpl
          # git add -f release/${{ steps.strings.outputs.plugin-name }}/win_x64/*.dll
          # git add -f release/${{ steps.strings.outputs.plugin-name }}/libs/64/*.zip
          # git add -f release/${{ steps.strings.outputs.plugin-name }}/templates/*.zip
          # git add -f release/${{ steps.strings.outputs.plugin-name }}/*.zip
          
          echo -e "\nCommit branch ${TARGET_BRANCH}\n---------------------"
          git commit -m "new ${TARGET_BRANCH} - ${TAG}"
          
          git remote add authenticated-origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          echo -e "\nPushing ${TARGET_BRANCH}\n---------------------"
          git push authenticated-origin ${TARGET_BRANCH} --force
          
          # git push -f -u origin ${TARGET_BRANCH} ## will fail since there is no TOKEN          
          
          echo -e "TARGET_BRANCH - ${TARGET_BRANCH}"
          echo -e "\ngithub.ref - ${{ github.ref }} - ${{ github.ref_name }} \n"


      - name: Compress Plugin Files
        shell: bash
        run: |
          # Prepare the release compressed file
          
          file_size_mb() {
            local file="$1"
            if [[ -f "$file" ]]; then
            stat -f "%z" "$file" # Get size in bytes
            # Calculate megabytes with higher precision
            local bytes=$(stat -f "%z" "$file")
            echo $(echo "scale=2; $bytes / (1024 * 1024)" | bc -l)
            else
            echo "0.00"
            fi
          }
          
          
          echo -e "\n---------"
          
          folder_to_compress="${{ github.workspace }}/release"
          output_file="${{ github.workspace }}/${{ steps.strings.outputs.plugin-name }}-${VERSION}.7z"
          split_size="60m"
          
          echo "Compressing '$folder_to_compress' to '$output_file'..."
          (cd ./release && 7z a -t7z "${{ github.workspace }}/${{ steps.strings.outputs.plugin-name }}-${VERSION}.7z" *)
          
          # Check the size of the compressed file
          compressed_size=$(file_size_mb "$output_file")
          echo "Initial compressed file size: ${compressed_size}M"
          
          # Check if the size is greater than 98M
          if (( $(echo "$compressed_size > 98" | bc -l) )); 
          then
            echo "Compressed file size exceeds 98M."
            # Delete the previous compressed file
            echo "Deleting previous compressed file: '$output_file'"
            rm -f "$output_file"
            
            # Compress again with splitting
            echo "Compressing '$folder_to_compress' to '$output_base.7z.001' with volume size ${split_size}..."
            (cd ./release && 7z a -t7z -v"$split_size" "${{ github.workspace }}/${{ steps.strings.outputs.plugin-name }}-${VERSION}.7z" *)
            
            echo "Folder compressed into multiple volumes with a maximum size of ${split_size} each."
          else
            echo "Folder compressed successfully to '$output_file'."          
          fi


      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            ${{ github.workspace }}/${{ steps.strings.outputs.plugin-name }}*7z*
          prerelease: ${{ contains(github.ref_name, '-beta') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#
#      # Optional: Add steps here to create a release, upload artifacts, etc.
#      # For example, to create a simple artifact:
#      - name: Upload Release Folder as Artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: missionx-${github.ref_name}
#          path: missionx
